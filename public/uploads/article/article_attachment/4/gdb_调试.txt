GDB 进行调试
2008-12-11 17:04


GDB 进行调试 使用心得
1: 对于在应用程序中加入参数进行调试的方法：
   直接用 gdb app -p1 -p2 这样进行调试是不行的。
   需要像以下这样使用：
    #gdb app
    (gdb) r -p1 -p2
    或者在运行run命令前使用set args命令：
    （gdb） set args p1 p2
    可以用show args 命令来查看

2. 加入断点：
   break <linenumber>
   break <funcName>
   break +offset
   break -offset
   (在当前行号的前面或后面的offset行停住。)

   break filename:linenum
   在源文件filename的linenum行处停住。

   break filename:function
   在源文件filename的function函数的入口处停住。

break ... if
...可以是上述的参数，condition表示条件，在条件成立时停住。比如在循环境体中，可以设置     break if i=100，表示当i为100时停住程序。


3. 查看运行时的堆栈：
   使用bt命令

4. 打印某个变量的值：
   print val

5. 单步： n
   继续运行：　c
　　step
　　单步跟踪，如果有函数调用，他会进入该函数。
　　next
　　同样单步跟踪，如果有函数调用，他不会进入该函数。很像VC等工具中的step over。后面可以加count也可以不加，不加表示一条条地执行，加表示执行后面的count条指令，然后再停住。
　　set step-mode
　　set step-mode on
　　打开step-mode模式，于是，在进行单步跟踪时，程序不会因为没有debug信息而不停住。这个参数有很利于查看机器码。
　　set step-mod off
　　关闭step-mode模式。
　　finish
　　运行程序，直到当前函数完成返回。并打印函数返回时的堆栈地址和返回值及参数值等信息。
　　until 或 u
　　当你厌倦了在一个循环体内单步跟踪时，这个命令可以运行程序直到退出循环体。

6.在ＧＤＢ中执行shell命令：
　在gdb环境中，你可以执行UNIX的shell的命令，使用gdb的shell命令来完成：
　eg. shell make

7. 运行环境
可设定程序的运行路径。
show paths 查看程序的运行路径。
set environment varname [=value] 设置环境变量。如：set env USER=hchen
show environment [varname] 查看环境变量。

8.观察点（WatchPoint）
观察点一般来观察某个表达式（变量也是一种表达式）的值是否有变化了，如果有变化，马上停住程 序。我们有下面的几种方法来设置观察点：
watch
   为表达式（变量）expr设置一个观察点。一量表达式值有变化时，马上停住程序。
rwatch
   当表达式（变量）expr被读时，停住程序。
awatch
   当表达式（变量）的值被读或被写时，停住程序。
info watchpoints
   列出当前所设置了的所有观察点。

9. 维护breakpoint
   clear
    清除所有的已定义的停止点。
   clear func
    清除所有设置在函数上的停止点。
delete [breakpoints] [range...]
删除指定的断点，breakpoints为断点号。如果不指定断点号，则表示删除所有的断点。range 表示断点号的范围（如：3-7）。其简写命令为d。
比删除更好的一种方法是disable停止点，disable了的停止点，GDB不会删除，当你还需要时，enable即可，就好像回收站一样。
disable [breakpoints] [range...]
   disable所指定的停止点，breakpoints为停止点号。如果什么都不指定，表示disable所有的停止 点。简写命令是dis.
enable [breakpoints] [range...]
   enable所指定的停止点，breakpoints为停止点号。


10、程序变量
查看文件中某变量的值：
file::variable
function::variable
可以通过这种形式指定你所想查看的变量，是哪个文件中的或是哪个函数中的。例如，查看文件f2.c中的全局变量x的值：
gdb) p 'f2.c'::x

查看数组的值
有时候，你需要查看一段连续的内存空间的值。比如数组的一段，或是动态分配的数据的大小。你可以使用GDB的“@”操作符，“@”的左边是第一个内存的地址的值，“@”的右边则你你想查看内存的长度。例如，你的程序中有这样的语句：
int *array = (int *) malloc (len * sizeof (int));
于是，在GDB调试过程中，你可以以如下命令显示出这个动态数组的取值：
p *array@len
如果是静态数组的话，可以直接用print数组名，就可以显示数组中所有数据的内容了。

11.输出格式
一般来说，GDB会根据变量的类型输出变量的值。但你也可以自定义GDB的输出的格式。例如，你想输出一个整数的十六进制，或是二进制来查看这个整型变量的中的位的情况。要做到这样，你可以使用GDB的数据显示格式：

x 按十六进制格式显示变量。
d 按十进制格式显示变量。
u 按十六进制格式显示无符号整型。
o 按八进制格式显示变量。
t 按二进制格式显示变量。
a 按十六进制格式显示变量。
c 按字符格式显示变量。
f 按浮点数格式显示变量。
(gdb) p i
$21 = 101
(gdb) p/a i
$22 = 0x65
(gdb) p/c i
$23 = 101 'e'
(gdb) p/f i
$24 = 1.41531145e-43
(gdb) p/x i
$25 = 0x65
(gdb) p/t i
$26 = 1100101

11.查看内存
使用examine命令（简写是x）来查看内存地址中的值。x命令的语法如下所示：
x/
n、f、u是可选的参数。
n 是一个正整数，表示显示内存的长度，也就是说从当前地址向后显示几个地址的内容。
f 表示显示的格式，参见上面。如果地址所指的是字符串，那么格式可以是s，如果地十是指令地址，那么格式可以是i。
u 表示从当前地址往后请求的字节数，如果不指定的话，GDB默认是4个bytes。u参数可以用下面的字符来代替，b表示单字节，h表示双字节，w表示四字节，g表示八字节。当我们指定了字节长度后，GDB会从指内存定的内存地址开始，读写指定字节，并把其当作一个值取出来。

n/f/u三个参数可以一起使用。例如：
命令：x/3uh 0x54320 表示，从内存地址0x54320读取内容，h表示以双字节为一个单位，3表示三个单位，u表示按十六进制显示。

12.自动显示

你可以设置一些自动显示的变量，当程序停住时，或是在你单步跟踪时，这些变量会自动显示。相关的GDB命令是display。
display
display/
display/ expr
expr是一个表达式，fmt表示显示的格式，addr表示内存地址，当你用display设定好了一个或多个表达式后，只要你的程序被停下来，GDB会自动显示你所设置的这些表达式的值。

格式i和s同样被display支持，一个非常有用的命令是：
display/i $pc

undisplay
delete display
删除自动显示，dnums意为所设置好了的自动显式的编号。

disable display
enable display
disable和enalbe不删除自动显示的设置，而只是让其失效和恢复。

info display
查看display设置的自动显示的信息。GDB会打出一张表格，向你报告当然调试中设置了多少个自动显示设置，其中包括，设置的编号，表达式，是否enable。

13. 设置显示选项
set print address
set print address on
打开地址输出，当程序显示函数信息时，GDB会显出函数的参数地址。系统默认为打开的，
show print address
查看当前地址显示选项是否打开。

set print array
set print array on
打开数组显示，打开后当数组显示时，每个元素占一行，如果不打开的话，每个元素则以逗号分隔。这个选项默认是关闭的。与之相关的两个命令如下，我就不再多说了。

set print array off
show print array

set print elements
这个选项主要是设置数组的，如果你的数组太大了，那么就可以指定一个来指定数据显示的最大长度，当到达这个长度时，GDB就不再往下显示了。如果设置为0，则表示不限制。

show print elements
查看print elements的选项信息。

set print null-stop
如果打开了这个选项，那么当显示字符串时，遇到结束符则停止显示。这个选项默认为off。

set print pretty on
如果打开printf pretty这个选项，那么当GDB显示结构体时会比较漂亮。

14.关于显示源码list

以下是list命令的說明。

參數 說明
list filename:number 列出某檔案的第幾行，檔案是可省略的。
list [function] 列出某函數的程式碼
list 繼續印出程式碼
list - 印出上一次list的程式碼的前一段程式碼(類似向上翻動)
show listsize 顯示現在一次印出幾行
set listsize 設定一次印出幾行

备常用命令：
１.常看源码：ｌｉｓｔ（ｌ）　
　　ｌｉｓｔ　＜ｌｉｎｅｎｕｍｂｅｒ＞　行号
　　ｌｉｓｔ　＜＋ｏｆｆｓｅｔ＞　当前行号的正偏移
　　ｌｉｓｔ　＜－ｏｆｆｓｅｔ＞　当前行号的负偏移
　　ｌｉｓｔ　＜ｆｉｌｅｎａｍｅ：ｌｉｎｅｎｕｍｂｅｒ＞　哪个文件的哪一行
　　ｌｉｓｔ　＜ｆｕｎｃｔｉｏｎ＞　函数名
　　ｌｉｓｔ　＜ｆｉｌｅｎａｍｅ：ｆｕｎｃｔｉｏｎ＞　文件的哪个函数
　　ｌｉｓｔ　＜＊ａｄｄｒｅｓｓ＞　程序运行时语句在内存中的地址

　２．设置断点：ｂｒｅａｋ（ｂ）
　　ｂｒｅａｋ　＜ｆｕｎｃｔｉｏn＞　指定函数断点
　　ｂｒｅａｋ　＜ｌｉｎｅｎｕｍｂｅｒ＞　指定行号断点
　　ｂｒｅａｋ　＜＋ｏｆｆｓｅｔ／－ｏｆｆｓｅｔ＞　当前行号的正／负偏移
　　ｂｒｅａｋ　＜ｆｉｌｅｎａｍｅ：ｌｉｎｅｎｕｍｂｅｒ＞　哪个文件的哪一行
　　ｂｒｅａｋ　＜＊ａｄｄｒｅｓｓ＞　运行中的内存地址
　　ｂｒｅａｋ　不带参数，下一条指令停止处
　　ｂｒｅａｋ ...　ｉｆ　＜ｃｏｎｄｉｔｉｏｎ＞　在运行中，当ｃｏｎｄｉｔｉｏｎ条件满足时停止。
　　　　ｅｇ．　ｂｒｅａｋ　ｉｆ　ｉ＝１００ //当i=100时，立即停止
                 break foo if i=100   //断点设置在foo中，断点条件是i-100, 一点在函数foo中，i的值等于100,被停止。

                

　３．查看信息：ｉｎｆｏ
　　ｉｎｆｏ　ｂｒｅａｋ　查看断点信息
    info locals 打印出当前函数中所有局部变量及其值
　　ｉｎｆｏ　ｓｔａｃｋ　查看栈中信息
    info frame 更详细的栈层地址信息
　　ｉｎｆｏ　ａｒｇｓ　查看参数信息
　　ｉｎｆｏ　ｒｅｇｉｓｔｅｒｓ／ｉｎｆｏ　ａｌｌ－ｒｅｇｉｓｔｅｒｓ　查看（所有）寄存器信息
　　ｉｎｆｏ　ｓｏｕｒｃｅｓ　查看项目的源代码信息

４．维护breakpoint：ｄｉｓａｂｌｅ/enable/clear/delete
     disable(dis) 【breakpoints】 【range...】
       如果没有参数，则停止所有的断点，
     enable 【breakpoints】【range】
     clear <function>/<filename:function>/<linenum>/<filename:linenum>
        清楚已定义的停止点
      delete [breakpoints] [ranga...]
         删除指定的断点

５．恢复程序运行：ｃｏｎｔｉｎｕｅ（ｃ）
　　
　　
6.until和finish
until 跳出循环比较有用
    help finish
     Execute until selected stack frame returns.
     Upon return, the value returned is printed and put in the value history.
finish 用来跳出函数比较有用。
    help until
     Execute until the program reaches a source line greater than the current
     or a specified location (same args as break command) within the current frame

